# NOTE: This buildkite pipeline is saved in the WebUI

agents:
  queue: "julia"
  # Only run on `sandbox.jl` machines (not `docker`-isolated ones) since we need nestable sandboxing
  sandbox.jl: "true"
  os: "linux"
steps:
  - label: ":rocket: sync logs"
    plugins:
      - staticfloat/cryptic#v1:
          variables:
            - AWS_ACCESS_KEY_ID="U2FsdGVkX1/H9b08vYfGLIy0xYlKBA+pkT5XAjh5XrQdd5XNbjyVFXhv2XRsG13h"
            - AWS_SECRET_ACCESS_KEY="U2FsdGVkX1/YhdG5Jr9ywTjysCrjQIoAlfrVT8qMPzBoPttuG3NIMorn3LLcWpp657MEPhjib+MQ/At1qllwBg=="
          files:
            - ".buildkite/secrets/id_rsa"
      - staticfloat/ssh-agent:
          keyfiles:
            - .buildkite/secrets/id_rsa
      - JuliaCI/julia#v1:
          version: "1.6"
          persist_depo_dirs: registries,packages,artifacts,compiled,scratchspaces
      - staticfloat/sandbox#v1:
          rootfs_url: "https://github.com/JuliaCI/rootfs-images/releases/download/v1/pkgserver-logsync.tar.gz"
          rootfs_treehash: "73efdb755348712bc640670871f413bd0f1a9d34"
    commands: |
      echo "--- Setup"
      LOG_DIR=$${JULIA_DEPOT_PATH}/scratchspaces/736c6f6f-5473-6973-796c-616e41676f4c/logs
      CSV_DIR=$${JULIA_DEPOT_PATH}/scratchspaces/736c6f6f-5473-6973-796c-616e41676f4c/csv_cache
      mkdir -p "$${LOG_DIR}" "$${CSV_DIR}"
      
      # Get list of servers
      SERVERS=( $$(curl -sfL https://pkg.julialang.org/meta/siblings | jq -r '.[]') )

      # Instantiate our project
      julia --project -e 'import Pkg; Pkg.instantiate()'

      echo "+++ Downloading logs from $${#SERVERS[@]} servers"
      for IDX in $${!SERVERS[@]}; do
        SERVER="$$(curl -sfL "$${SERVERS[$${IDX}]}/meta" | jq -r '.pkgserver_url' | sed -e 's&^https://&&')"
        echo " -> [$$IDX/$${#SERVERS[@]}] $${SERVER}"

        USER=ubuntu
        if [[ "$${SERVER}" == cn-* ]]; then
          USER=centos
        fi
        # Ignore return code from `rsync` so that we can skip failing servers
        (rsync -Prt -e "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -oBatchMode=yes" \
                      "$${USER}@$${SERVER}:~/src/PkgServer.jl/deployment/logs/nginx/access_*.gz" \
                      "$${LOG_DIR}" || true) &
      done

      # Wait for all those `rsync` commands to finish
      wait

      echo "+++ Parsing into `.csv.zst` files"
      julia --project bin/convert_to_csv.jl

      echo "+++ Uploading raw logs and parsed CSV files to S3"
      aws s3 sync "$${LOG_DIR}" "s3://julialang-logs/pkgservers/raw/"
      aws s3 sync "$${CSV_DIR}" "s3://julialang-logs/pkgservers/csv/"
